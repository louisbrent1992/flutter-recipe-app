const express = require("express");
const router = express.Router();
const axios = require("axios"); // For calling an external AI API if needed
const { v4: uuidv4 } = require("uuid");

// In-memory recipes database
let recipes = [];

// Load environment variables
const OPENAI_API_KEY = process.env.OPENAI_API_KEY; // Use environment variable
const OPENAI_API_URL = "https://api.openai.com/v1/chat/completions";

const UNSPLASH_ACCESS_KEY = process.env.UNSPLASH_ACCESS_KEY; // Use environment variable
const UNSPLASH_API_URL = "https://api.unsplash.com/photos/random";

// Image cache
const imageCache = {};

// GET /recipes - Fetch all recipes
router.get("/", (req, res) => {
	res.json(recipes);
});

// GET /recipes/:id - Get a specific recipe
router.get("/:id", (req, res) => {
	const recipe = recipes.find((r) => r.id === req.params.id);
	if (recipe) {
		res.json(recipe);
	} else {
		res.status(404).json({ error: "Recipe not found" });
	}
});

// POST /recipes - Create a new recipe
router.post("/", (req, res) => {
	const newRecipe = { id: uuidv4(), ...req.body };
	recipes.push(newRecipe);
	res.status(201).json(newRecipe);
});

// PUT /recipes/:id - Update an existing recipe
router.put("/:id", (req, res) => {
	const index = recipes.findIndex((r) => r.id === req.params.id);
	if (index !== -1) {
		recipes[index] = { ...recipes[index], ...req.body };
		res.json(recipes[index]);
	} else {
		res.status(404).json({ error: "Recipe not found" });
	}
});

// DELETE /recipes/:id - Delete a recipe
router.delete("/:id", (req, res) => {
	const index = recipes.findIndex((r) => r.id === req.params.id);
	if (index !== -1) {
		const deleted = recipes.splice(index, 1);
		res.json(deleted[0]);
	} else {
		res.status(404).json({ error: "Recipe not found" });
	}
});

// Function to fetch an image from Unsplash with caching
const fetchImage = async (query) => {
	// Check if the image is already cached
	if (imageCache[query]) {
		return imageCache[query]; // Return cached image URL
	}

	try {
		const response = await axios.get(UNSPLASH_API_URL, {
			params: {
				query: query,
				client_id: UNSPLASH_ACCESS_KEY,
			},
		});
		const imageUrl = response.data.urls.regular; // Return the regular size image URL

		// Cache the image URL
		imageCache[query] = imageUrl;

		return imageUrl;
	} catch (error) {
		console.error("Error fetching image from Unsplash:", error);
		return null; // Return null if there's an error
	}
};

// POST /recipes/generate - AI-generated recipe creation
router.post("/generate", async (req, res) => {
	const { ingredients = "", dietaryRestrictions, cuisineType } = req.body;

	try {
		// Call OpenAI API to generate a recipe
		const response = await axios.post(
			OPENAI_API_URL,
			{
				model: "gpt-3.5-turbo", // Specify the model you want to use
				messages: [
					{
						role: "user",
						content: `Generate a recipe with the following ingredients: ${ingredients}. Dietary restrictions: ${dietaryRestrictions}. Cuisine type: ${cuisineType}. If there are no dietary restrictions, cuisine type, or ingredients, provide random values for these options.`,
					},
				],
				max_tokens: 150, // Adjust the token limit as needed
			},
			{
				headers: {
					Authorization: `Bearer ${OPENAI_API_KEY}`,
					"Content-Type": "application/json",
				},
			}
		);

		const generatedContent = response.data.choices[0].message.content;
		const steps = generatedContent.split("\n"); // Assuming the response contains steps in a new line format

		// Fetch an image based on the recipe description
		const imageDescription = `A delicious ${
			cuisineType || "fusion"
		} dish with ${ingredients}.`;
		const imageUrl = await fetchImage(imageDescription); // Fetch an image based on the description

		const generatedRecipe = {
			id: uuidv4(),
			title: `AI Generated Recipe (${cuisineType || "Fusion"})`,
			ingredients: ingredients?.split(",").map((item) => item.trim()) || [],
			steps: steps,
			description: "This is a recipe generated by AI based on your inputs.",
			imageUrl: imageUrl, // Add the fetched image URL here
		};

		// Optionally, store the generated recipe
		recipes.push(generatedRecipe);

		res.json(generatedRecipe);
	} catch (error) {
		console.error("Error generating recipe:", error);
		res.status(500).json({ error: "Failed to generate recipe" });
	}
});

// POST /recipes/import - Social media recipe import parser
router.post("/import", async (req, res) => {
	const { url } = req.body;

	// Dummy parsing logic: In a real scenario, perform web scraping or use an API
	const importedRecipe = {
		id: uuidv4(),
		title: "Imported Recipe from Social Media",
		ingredients: ["1 cup flour", "2 eggs", "1/2 cup milk"],
		steps: ["Mix ingredients", "Cook on a skillet", "Serve warm"],
		description:
			"This recipe was imported and parsed from a social media post.",
		imageUrl: await fetchImage("recipe"), // Fetch an image for the imported recipe
	};

	recipes.push(importedRecipe);

	res.json(importedRecipe);
});

module.exports = router;
